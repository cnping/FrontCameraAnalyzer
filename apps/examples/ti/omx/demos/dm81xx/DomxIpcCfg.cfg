var TilerMsgHeapId;
var GraphicsRpcMsgHeapId;

function init(DomxIpcCfgArg)
{
  /* root of the configuration object model */
  var Program = xdc.useModule('xdc.cfg.Program');
  /* config params specified in package build script */
  var cfgArgs = Program.build.cfgArgs;

  if (cfgArgs.coreName.match("DSP"))
  {
    /* RcmClient requires MessageQ, configure queues, heaps, delegate */
    var Ipc      = xdc.useModule('ti.sdo.ipc.Ipc'); 
    var Settings    = xdc.useModule('ti.sdo.ipc.family.Settings');
    var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
    /* Additional heap for Tiler Proxy + Graphics Rpc */
    /*MessageQ.numHeaps          = ((DomxTypes.coreCount * (DomxTypes.coreCount - 1))/2) + 1 + 1;*/
    MessageQ.numHeaps          = ((4 * (4.- 1))/2) + 1 + 1;
    MessageQ.maxNameLen        = 128;
    MessageQ.maxRuntimeEntries = 128;
    /* The last MsgHeap is for Tiler Proxy messages */
    TilerMsgHeapId             = (MessageQ.numHeaps - 1);
    GraphicsRpcMsgHeapId       = (TilerMsgHeapId - 1);
    var SharedRegion           = xdc.useModule('ti.sdo.ipc.SharedRegion');
    SharedRegion.numEntries    = 4;

    var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
    var multiProcNameList = Settings.getDeviceProcNames();
    MultiProc.setConfig (cfgArgs.coreName,  multiProcNameList);
    var g_srIdx = 0;
    var hostId = MultiProc.getIdMeta("HOST");
    if (cfgArgs.mode.match("local"))
    {
      var sr0OwnerProcId = MultiProc.getIdMeta(null);
    }
    else {
      if (cfgArgs.mode.match("remoteWithHOST")) {
        var sr0OwnerProcId = MultiProc.getIdMeta("HOST");
      }
      else if (cfgArgs.mode.match("remoteDSPWithHOST")) {
        var sr0OwnerProcId = MultiProc.getIdMeta("HOST");
      }
      else if (cfgArgs.mode.match("remoteDSP")) {
       var sr0OwnerProcId = MultiProc.getIdMeta("DSP");
      }      
      else {
        throw new Error ("Unknown Build Mode " +  cfgArgs.mode);
      }
    }
  }
  else
  {     
     throw (new Error("Unknown slave core :" + cfgArgs.coreName));
  }

  if (cfgArgs.coreName.match("DSP"))
  {
 
  /******************/
  Ipc.procSync = Ipc.ProcSync_PAIR;
  /* Set host id */
  Ipc.hostProcId = hostId;
  Ipc.sr0MemorySetup = true;
  for (var i=0; i < MultiProc.numProcessors; i++) {
       Ipc.setEntryMeta({
           remoteProcId: i,
           setupNotify:true,
           setupMessageQ:true
       });
  }

  /* Shared 0 Memory Map */
  sr0Segment = undefined;
  for (var i = 0; i < Program.cpu.memoryMap.length; i++) 
  {
    if (Program.cpu.memoryMap[i].name == DomxIpcCfgArg.sr0MemSegmentName) {
      sr0Segment = Program.cpu.memoryMap[i];
    }
  }

  if (sr0Segment == undefined) 
  {
    throw new(Error("Section named " + DomxIpcCfgArg.sr0MemSegmentName + " undefined. PLease update memmap"));
  }

  /*
    *  Need to define the shared region. The IPC modules use this
    *  to make portable pointers. All processors need to add this
    *  call with their base address of the shared memory region.
    *  If the processor cannot access the memory, do not add it.
    */
  SharedRegion.setEntryMeta(0,
       { base: sr0Segment.base,
         len:  sr0Segment.len,
         ownerProcId: sr0OwnerProcId,
         isValid: true,
           cacheEnable:true,
           name: "Sr0",
         });
  }
  else
  {     
     throw (new Error("Unknown slave core :" + cfgArgs.coreName));
  }
  return (g_srIdx);

}

function getTilerMsgHeapId()
{
  return (TilerMsgHeapId);
}

function getGraphicsRpcMsgHeapId()
{
  return(GraphicsRpcMsgHeapId);
}


