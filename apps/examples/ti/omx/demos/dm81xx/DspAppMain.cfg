/*
 *  ======== Operating System Configuration ========
 */
/* BIOS5 */
var TaskBios5        = xdc.useModule("ti.bios.TSK");
var HeapMemBios5  = xdc.useModule("ti.bios.MEM");
var ClockBios5  = xdc.useModule("ti.bios.CLK");
var SwiBios5  = xdc.useModule("ti.bios.SWI");
var HwiBios5  = xdc.useModule("ti.bios.HWI");

var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;
/* assign Bios6 delegates to xdc.runtime.knl modules */
var Settings    = xdc.useModule('ti.sysbios.xdcruntime.Settings');

/* use modules */
/* XDC runtime modules */
var Startup     = xdc.useModule("xdc.runtime.Startup");
var Log         = xdc.useModule("xdc.runtime.Log");
var Assert      = xdc.useModule("xdc.runtime.Assert");
var Main        = xdc.useModule("xdc.runtime.Main");
var Memory      = xdc.useModule("xdc.runtime.Memory");
var Diags       = xdc.useModule("xdc.runtime.Diags");
var Timestamp   = xdc.useModule("xdc.runtime.Timestamp");
var GateH       = xdc.useModule('xdc.runtime.knl.GateH');

/* XDC runtime knl modules */
var Cache       = xdc.useModule('xdc.runtime.knl.Cache');

/* BIOS       */
var BIOS        = xdc.useModule('ti.sysbios.BIOS');

/* BIOS HAL */
var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');

/* BIOS gates */
var GateMutex   = xdc.useModule('ti.sysbios.gates.GateMutex');

/* BIOS KNL */
var Task        = xdc.useModule("ti.sysbios.knl.Task");
var Idle        = xdc.useModule("ti.sysbios.knl.Idle");
var Clock       = xdc.useModule("ti.sysbios.knl.Clock");
var Swi         = xdc.useModule('ti.sysbios.knl.Swi');

/* BIOS IPC */
var Semaphore   = xdc.useModule("ti.sysbios.knl.Semaphore");
var Event       = xdc.useModule('ti.sysbios.knl.Event');
var Mailbox     = xdc.useModule('ti.sysbios.knl.Mailbox');

/* BIOS HEAP*/
var HeapMem     = xdc.useModule("ti.sysbios.heaps.HeapMem");

/* IPC Modules */
var Baseipc         = xdc.loadPackage ("ti.ipc");
var Notify                 = xdc.useModule('ti.sdo.ipc.Notify');
var MessageQ               = xdc.useModule('ti.sdo.ipc.MessageQ');
var ListMP                 = xdc.useModule('ti.sdo.ipc.ListMP');
var GatePeterson    = xdc.useModule('ti.sdo.ipc.gates.GatePeterson');
var GateHWSpinLock    = xdc.useModule('ti.sdo.ipc.gates.GateHWSpinlock');

/* IPC NotifyDrivers Modules */
var NotifyDriverShm        = xdc.useModule('ti.sdo.ipc.notifyDrivers.NotifyDriverShm');
// var NameServerRemoteNotify = xdc.useModule('ti.sdo.ipc.NameServerRemoteNotify');
var SharedRegion           = xdc.useModule('ti.sdo.ipc.SharedRegion');

var Syslink = xdc.useModule ('ti.syslink.ipc.rtos.Syslink');

/* SDO .Utils. Modules */
var NameServer             = xdc.useModule('ti.sdo.utils.NameServer');

/* FC MEMUTILS */
var fcMemUtils = xdc.useModule('ti.sdo.fc.memutils.MEMUTILS');

/* TIMM OSAL */
xdc.loadPackage('ti.timmosal');

/* OMX Utils */
/* xdc.loadPackage('ti.omx.omxutils'); */

var Program         = xdc.useModule('xdc.cfg.Program'); 
print ("PROGRAM : .............", Program);
Program.stack       = 0x4000;

var cfgArgs = Program.build.cfgArgs;
print ("CONFIG ARGS : .............", cfgArgs);

/* 
* Create a static task for app DSP intialization functions
*/
var Task            = xdc.useModule('ti.sysbios.knl.Task');
var task_params     = new Task.Params;
task_params.stackSize = 0x6000;
task_params.priority  = 7;
Task.create("&Dsp_AppTask", task_params);


/* 
* Create a default system heap using ti.bios.HeapMem and plugin this as default heap
*/
var HeapMem                     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams               = new HeapMem.Params;
heapMemParams.size              = 0x0800000;
heapMemParams.sectionName       = ".systemHeap";
var heap0                       = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance      = heap0;

/* create the semaphore (event) used by the server application */
var Global = xdc.useModule('ti.sdo.ce.osal.Global'); 
Global.runtimeEnv = Global.DSPBIOS;

//set All heaps of dskts as the default heap0
var DSKT2           = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
/* Create heaps as global variables so they can be used in C code. */
Program.global.DSKT2_HEAP = heap0;

DSKT2.DARAM0    = "DSKT2_HEAP";
DSKT2.DARAM1    = "DSKT2_HEAP";
DSKT2.DARAM2    = "DSKT2_HEAP";
DSKT2.SARAM0    = "DSKT2_HEAP";
DSKT2.SARAM1    = "DSKT2_HEAP";
DSKT2.SARAM2    = "DSKT2_HEAP";
DSKT2.ESDATA    = "DSKT2_HEAP";
DSKT2.IPROG     = "DSKT2_HEAP";
DSKT2.EPROG     = "DSKT2_HEAP";
DSKT2.DSKT2_HEAP = "DSKT2_HEAP";

if (cfgArgs.coreName.match("DSP"))
{
  environment['xdc.cfg.check.fatal'] = 'false';
  
  xdc.useModule('xdc.runtime.knl.Semaphore').Proxy = xdc.useModule('ti.sysbios.xdcruntime.SemProcessSupport'); 

  var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');

  // use mp3dec
  // var mp3dec         = xdc.useModule('ti.sdo.codecs.mp3dec.ce.MP3DEC');
  
  // use aacdec
  var aaclcdec         = xdc.useModule('ti.sdo.codecs.aaclcdec.ce.AACLCDEC');
  
  //var aaclcenc         = xdc.useModule('ti.sdo.codecs.aaclcenc.ce.AACLCENC');
  

  xdc.useModule('ti.sdo.ce.global.Settings');
  
  xdc.loadPackage('ti.sdo.ce.audio1'); 
  xdc.loadPackage('ti.sdo.ce.alg');
  xdc.useModule('ti.sdo.ce.Settings').checked         = true;
    
  //  ======== Engine Configuration ========
  
  var Engine = xdc.useModule('ti.sdo.ce.Engine');
  var myEngine = Engine.create("adec", [
      //{
      //    name : "mp3dec",
      //    mod  : mp3dec,
      //    local: true
      //},
      {
                name : "aaclcdec",
                mod  : aaclcdec,
                local: true
      }
  ]);

  //var myAENCEngine = Engine.create("aenc", [
  //    {
  //              name : "aaclcenc",
  //              mod  : aaclcenc,
  //              local: true
  //    }
  //]);
  
  
  xdc.loadPackage("ti.sdo.fc.dskt2").profile = "whole_program_debug";
  xdc.loadPackage("ti.sdo.fc.rman").profile = "whole_program_debug";

  var fcSettings = xdc.useModule("ti.sdo.fc.global.Settings"); 
  fcSettings.enableLogFC =false    

}

/* Load all module specific config capsules */
var BiosCfg = xdc.loadCapsule("BiosCfg.cfg");
BiosCfg.init();

var SyslinkCfg   = xdc.loadCapsule("SyslinkCfg.cfg");
SyslinkCfg.init();

var TimmOsalCfg   = xdc.loadCapsule("TimmOsalCfg.cfg");
TimmOsalCfg.init();

var DomxIpcCfg = xdc.loadCapsule("DomxIpcCfg.cfg");
var DomxIpcCfgArg = {sr0MemSegmentName:"IPC_SR_COMMON"};
var g_srIdx = DomxIpcCfg.init(DomxIpcCfgArg);

var DomxRcmCfg = xdc.loadCapsule("DomxRcmCfg.cfg");
DomxRcmCfg.init();

/* load app log configuration parameters */
var AppLogCfg = xdc.loadCapsule("AppLogCfg.cfg");
AppLogCfg.init();

/* load app log configuration parameters */
var AppMemSegPlacementCfg = xdc.loadCapsule("AppMemSegPlacementCfg.cfg");
AppMemSegPlacementCfg.init();

var TilerMsgHeapId = DomxIpcCfg.getTilerMsgHeapId();
/* configure ti.sdo.tiler */
var tilerSettings = xdc.useModule('ti.sdo.tiler.Settings');

tilerSettings.tilerLib = tilerSettings.TilerLib_Stub;
tilerSettings.tilerDaemonName = "TilerMgr:HOST";
tilerSettings.heapId = TilerMsgHeapId;

if (cfgArgs.mode.match("remoteWithHOST") || cfgArgs.mode.match("remoteDSPWithHOST")) {
  Program.global.Global_appOnC674dsp = false;
}
else if (cfgArgs.mode.match("local")) {
  Program.global.Global_appOnC674dsp = true;
}

var Timer = xdc.useModule("ti.sysbios.timers.dmtimer.Timer");

if (cfgArgs.omxBuildPlatform.match("ti814x-evm")) {
Timer.intFreq.lo = 20000000;
print ("ti814x-evm Timer.intFreq.lo = 20000000........");
}
else {
Timer.intFreq.lo = 32768;
print ("ti816x-evm Timer.intFreq.lo = 32768........");
}

Timer.intFreq.hi = 0;

///* ====================================================== */
///* ================ Logger configuration ================ */
///* ====================================================== */
//
//var Defaults = xdc.useModule('xdc.runtime.Defaults');
//var Diags = xdc.useModule('xdc.runtime.Diags');
//var Main = xdc.useModule('xdc.runtime.Main');
//
//var Load = xdc.useModule('ti.sysbios.utils.Load');
//Load.hwiEnabled = false;
//Load.swiEnabled = false;
//
///* 
//* Create a static task for M3 UIA configuration
//*/
//var taskParams = new Task.Params();
//taskParams.instance.name = "uiaServerTask";
//task_params.stackSize = 0x6000;
//Task.create('&uiaServerTask', taskParams);
//
///* 
// *  Create a LoggerSM instance and use it for all logging. Make sure it is at the same section for all cores (DSP, Video, VPSS) and not put anything else in "LOGGER_SM". All cores will share this same memory. All cores must have numCores and sharedMemorySize be the same value. Note: LOGGER_SM memory segment is defined in ti/uia/examples/evmTI816X/video/Platform.xdc.
// */
//var LoggerSM = xdc.useModule('ti.uia.runtime.LoggerSM');
//
//LoggerSM.partitionId = 0;
//LoggerSM.bufSection = ".loggerSM";
//LoggerSM.sharedMemorySize = 0x00100000; 
//LoggerSM.numPartitions = 3;
//LoggerSM.decode = true;
//LoggerSM.overwrite = false;
//var statusLogger = LoggerSM.create();
//
///* 
// *  Make sure the section is in LOGGERSM (defined in 
// *  ti\omx\build\MemSegmentDefinition.xs). Also make sure it is a NOLOAD
// *  section. This avoids wiping out another cores logger memory when more 
// *  than one cores is loaded.
// */
//Program.sectMap[".loggerSM"] = new Program.SectionSpec();
//Program.sectMap[".loggerSM"].loadSegment = "LOGGER_SM";
//Program.sectMap[".loggerSM"].type = "NOLOAD";
//
///* 
// *  Plug the LoggerSM logger into LoggerCircBuf. All STATUS events
// *  and logs from Main will go to the LoggerSM instance 
// */
//LoggerCircBuf = xdc.useModule('ti.uia.runtime.LoggerCircBuf');
//LoggerCircBuf.statusLogger = statusLogger;
//LoggerCircBuf.filterByLevel = true;
//LoggerCircBuf.moduleToRouteToStatusLogger = "xdc.runtime.Main";
//
///*
// *  Use LoggingSetup which uses UploadMode_JTAGSTOPMODE as the 
// *  default. Increase the Log sizes.
// *
// *  Configuration done by the application is still honored (e.g. setting
// *  up the common$.diags mask).
// *
// *  Please refer to the ti.uia.sysbios.LoggingSetup module for more
// *  details and configuration options.
// */
//var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
//LoggingSetup.loadLoggerSize = 1024*10;
//LoggingSetup.mainLoggerSize = 1024*1024;
//LoggingSetup.sysbiosLoggerSize = 32768*10;
//
///* Use the a transport to move the records to MCSA */
//LoggingSetup.eventUploadMode = LoggingSetup.UploadMode_NONJTAGTRANSPORT;
//
///* ================ UIA configuration ================ */
///* 
// *  The default is to have a single core. This example is a multi-core
// *  example. So UIA must be told to act accordingly.
// */ 
//var ServiceMgr = xdc.useModule('ti.uia.runtime.ServiceMgr');
//ServiceMgr.topology = ServiceMgr.Topology_MULTICORE;
//ServiceMgr.transportType = ServiceMgr.TransportType_NULL;
//
///* The HOST is the master UIA processors */
//ServiceMgr.masterProcId = 3;
//
///* The application is using the UIA benchmark events. */ 
//var UIABenchmark  = xdc.useModule('ti.uia.events.UIABenchmark');
//
//var UIAStatistic = xdc.useModule('ti.uia.events.UIAStatistic');
//
///* 
// * Turn on ANALYSIS for benchmark events and others for Log_print used in app 
// */
///* RUNTIME_ON Diags masks */
//Main.common$.diags_USER1 = Diags.RUNTIME_ON;
///* RUNTIME_OFF Diags masks */
//Main.common$.diags_ANALYSIS = Diags.RUNTIME_OFF;
//Main.common$.diags_ENTRY = Diags.RUNTIME_OFF;
//Main.common$.diags_EXIT = Diags.RUNTIME_OFF;
//Main.common$.diags_USER2 = Diags.RUNTIME_OFF;
//Main.common$.diags_USER3 = Diags.RUNTIME_OFF;
//Main.common$.diags_USER4 = Diags.RUNTIME_OFF;
//Main.common$.diags_USER5 = Diags.RUNTIME_OFF;
//Main.common$.diags_USER6 = Diags.RUNTIME_OFF;
//Main.common$.diags_USER7 = Diags.RUNTIME_OFF;
//Main.common$.diags_INFO = Diags.RUNTIME_OFF;
//Main.common$.diags_USER8 = Diags.RUNTIME_OFF;
///* Turning Semaphore logging off */
//Semaphore.common$.diags_USER1 = Diags.RUNTIME_OFF;
//Semaphore.common$.diags_USER2 = Diags.RUNTIME_OFF;
