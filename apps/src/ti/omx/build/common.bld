/*
 *  Copyright 2009 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */

/*
 *  ======== common.bld ========
 *
 */


/* 
 *  ======== getCores ========
 *  Determines which cores to build for.
 *
 *  Any argument in XDCARGS which does not contain core= is treated
 *  as a core name. This way build for multiple cores can be specified by
 *  separating them with a space. 
 */
function getCores(xdcArgs)
{
    var coreNames = new Array();
    
    /* Check for any XDCARGS with core=; these are the corenames */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/core=/)) {
            coreNames.push(xdcArgs[i].substr(5));
        }
    }

    return coreNames;
}


/* 
 *  ======== getProfiles ========
 *  Determines which profiles to build for.
 *
 *  Any argument in XDCARGS which does not contain platform= is treated
 *  as a profile. This way multiple build profiles can be specified by
 *  separating them with a space. 
 */
function getProfiles(xdcArgs)
{
    var profiles = new Array();
    
    /* Check for any XDCARGS with profile=; these are profiles. */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/profile=/)) {
            profiles.push(xdcArgs[i].substr(8));
        }
    }

    return profiles;
}

function getBuildModes(xdcArgs)
{
    var buildModes = new Array();
    
    /* Check for any XDCARGS with buildMode=; these are specific 
       build configuration */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/buildMode=/)) {
            buildModes.push(xdcArgs[i].substr(10));
        }
    }
    return buildModes;
}


/*
 *  ======== buildLibs ========
 *  This function generates the makefile goals for the libraries taking 
 *  into account the profile variants, specific ducati cores and build modes
 *
 */
function buildLibs(objList, trgList, xdcArgs, libCompileOpts, coreName)
{
    var buildMode = new Array();

    var buildMode = getBuildModes(xdcArgs);

    var compileOpts = " -D_DM270  -D_DM290_IMX_MCFIX_ "; 

    if (libCompileOpts != null){
        compileOpts += libCompileOpts;
    }

    /* update the build flag based on configurAtions */
    for (var j = 0; j < buildMode.length; j++) {

        if(buildMode[j].match("TESTCOMPONENTS")) {
            compileOpts += " -DTESTCOMPONENTS=1 ";
        }

        if(buildMode[j].match("VIDEOCOMPONENTS")) {
            compileOpts += " -DVIDEOCOMPONENTS=1 ";
        }

        if(buildMode[j].match("ISSCOMPONENTS")) {
            compileOpts += " -DISSCOMPONENTS=1 ";
        }

        if(buildMode[j].match("DRIVERCOMPONENTS")) {
            compileOpts += " -DDRIVERCOMPONENTS=1 ";
        }
    }

    if (buildMode.length == 0) {
        compileOpts += " -DDRIVERCOMPONENTS=1 -DISSCOMPONENTS=1 -DVIDEOCOMPONENTS=1 -DTESTCOMPONENTS=1 ";
    }

     compileOpts += " -DMULTICHANNEL_OPT=1 ";
     

    var profiles = getProfiles(xdcArgs);
    /* If no profiles were assigned, build for release */
    if (profiles.length == 0) {
        profiles[0] = "release";
    }

    for (var i = 0; i < Build.targets.length; i++) {

        var targ = Build.targets[i];

        for (var j = 0; j < profiles.length; j++) {

            var profile         = profiles[j];
            var profileOpts     = compileOpts;

            if (profile.match(/release/)) {
                profileOpts += " -O3 -ms --align_structs=4";
            }
            var lib_name = 'lib/' + profile + '/' + Pkg.name.slice(Pkg.name.lastIndexOf(".") + 1,(Pkg.name.length)) ;

            print ("Profile Selected " + profile);
            var lib = Pkg.addLibrary(lib_name, targ, {profile: profile, copts: profileOpts});

            lib.addObjects(objList);
        }
    }
}

/*
 *  ======== supportsCore ========
 *  Returns true if coreName is in the supported core list. If coreNameList
 *  is null or empty, that's taken to mean all targets are supported.
 */
function supportsCore(coreName, coreNameList)
{
    if ((coreNameList == null) || (coreNameList.length == 0)) {
        return true;
    }

    for (var j = 0; j < coreNameList.length; j++) {
        if(coreName.match(coreNameList[j])){
            return true;
        }
    }

    return false;
}

/*
 *  ======== commonGetLibs ========
 *  Common getLibs function
 */

function commonGetLibs(prog, bCoreFlag, pkg, dir)
{
    var suffix;

    /* find a compatible suffix */
    if ("findSuffix" in prog.build.target) {
        suffix = prog.build.target.findSuffix(pkg);
    }
    else {
        suffix = prog.build.target.suffix;
    }

    var name = pkg.$name.slice(pkg.$name.lastIndexOf(".") + 1,(pkg.$name.length)) + ".a" + suffix;
    var lib  = "";

    lib = "lib/" + "/" + pkg.profile + "/" + name;

    if (java.io.File(dir + lib).exists()) {
        return lib;
    }
    else {
        print("Default lib not found: " + lib +"\nlooking for release lib");
        lib = "lib/" + "release/" + name;
        if (java.io.File(dir + lib).exists()) {
            return lib;
        }
    }

    /* could not find any library, throw exception */
    throw Error("Library not found: " + lib);
}

